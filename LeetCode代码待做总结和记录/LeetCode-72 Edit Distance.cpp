/*动态归化问题，这个动态规划问题有点难了，能知道这是找规律，但是具体怎么操作感觉有点难了，因为这个方法比较巧妙,可以看LeetCode给出的官方解答
结合官方解答和下面的理解就能够理解深刻了，特别是数组的三个方向对应的是完成对应的当前编辑的三个方法： 
Q2: 为什么d是一个[m+1][n+1]大小的二维数组，为什么d数组要比字符串长度大一？
A2: 考虑A、B都为空字符串，我们还是需要一个[1][1]大小的数组记录其编辑距离为0。更进一步也就是说，我们假设字符串A为"AC"，则我们需要考虑
['', 'A', 'AC']三种情况。
Q1: 如何理解d[i][j]的计算公式?

A1: 第(i,j)个位置的计算需要依赖于和它相邻的三个元素(i-1,j)、(i, j-1)和(i-1,j-1)，关键是哪一个对应删除，哪一个对应于插入，哪一个对应于替换？
如果此时A[i]不等于B[j]，则（下面为全文最重要部分）:

对于(i-1,j-1)时，d(i-1, j-1)表示完成从A[0,i-1]到B[0,j-1]的编辑次数，即现在A[0,i-1]=B[0,j-1]，对于(i,j)，我们直接把A[i]替换成B[j]即完成编辑。
因此(i-1,j-1)对应于把A[i]用B[j]替换的一次操作
对于(i-1, j)时，d(i-1, j)表示完成从A[0, i-1]到B[0, j]的编辑次数，即现在A[0,i-1]=B[0,j]，对于(i,j)，我们直接把A[i]删除即可完成编辑，因此(i-1,j)对
应于把A[i]删除的一次操作
对于(i, j-1)时，d(i, j-1)表示完成从A[0, i]到B[0, j-1]的编辑次数，即现在A[0,i]=B[0,j-1]，对于(i,j)，我们直接用B[j]插入到A[i]的位置即可完成编辑，
因此(i,j-1)对应于把B[j]插到A[i]的一次操作
*/ 
 
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.length();
        int m=word2.length();
        if (n*m==0) return n+m;
        int d[n+1][m+1];
        for (int i=0;i<=n;i++)
        {
            d[i][0]=i;
        }
        for (int j=0;j<=m;j++)
        {
            d[0][j]=j;
        }
        for (int i=1;i<n+1;i++)
        {
            for (int j=1;j<m+1;j++)
            {
                int left=d[i-1][j]+1;
                int down=d[i][j-1]+1;
                int left_down=d[i-1][j-1];
                if(word1[i-1]!=word2[j-1])
                {
                    left_down+=1;
                }
                d[i][j]=min(left,min(down,left_down));
            }
        }
        return d[n][m];
    }
};
